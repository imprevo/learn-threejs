---
import Canvas from '../layouts/Canvas.astro';
---

<Canvas title="Vaporwave" />

<script>
  import * as THREE from 'three';
  import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';
  import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';
  import { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';
  import { GammaCorrectionShader } from 'three/examples/jsm/shaders/GammaCorrectionShader';
  import { RGBShiftShader } from 'three/examples/jsm/shaders/RGBShiftShader';

  const container = document.getElementById('container')!;

  const appCongig = {
    width: container.clientWidth,
    height: container.clientHeight,
    gridSize: 200,
    cameraSpeed: 50,
  };
  const colors = {
    sun: new THREE.Color('hotpink'),
  };

  const clock = new THREE.Clock();
  const textureLoader = new THREE.TextureLoader();
  const gridTexture = await textureLoader.loadAsync('/textures/grid.png');
  const terrainTexture = await textureLoader.loadAsync(
    '/textures/displacement-map.png',
  );
  const starfieldTexture = await textureLoader.loadAsync(
    '/textures/starfield.png',
  );
  const renderer = createRenderer();
  const scene = createScene();
  const camera = createCamera();
  const effectComposer = createEffectComposer();
  const grids = createGrids();
  const sun = createSun();
  const sunZPosition = sun.position.z;

  createAmbientLight();

  window.addEventListener('resize', () => {
    appCongig.width = container.clientWidth;
    appCongig.height = container.clientHeight;

    camera.aspect = appCongig.width / appCongig.height;
    camera.updateProjectionMatrix();
    renderer.setSize(appCongig.width, appCongig.height);

    effectComposer.setSize(appCongig.width, appCongig.height);
    effectComposer.setPixelRatio(getPixelRatio());
  });

  renderer.setAnimationLoop(() => {
    const delta = clock.getDelta();

    moveCamera(delta);
    shiftGrids();

    effectComposer.render();
  });

  function createRenderer() {
    const renderer = new THREE.WebGLRenderer({
      antialias: true,
      canvas: container.querySelector('canvas')!,
    });
    renderer.setSize(appCongig.width, appCongig.height);
    renderer.setPixelRatio(getPixelRatio());
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;

    return renderer;
  }

  function createScene() {
    const scene = new THREE.Scene();
    scene.background = starfieldTexture;
    scene.fog = new THREE.Fog(colors.sun, 200, 400);
    return scene;
  }

  function createCamera() {
    const camera = new THREE.PerspectiveCamera(
      75,
      container.clientWidth / container.clientHeight,
      0.1,
      1000,
    );
    camera.position.y = 10;
    camera.position.z = 100;
    camera.rotation.y = Math.PI;

    return camera;
  }

  function createEffectComposer() {
    const composer = new EffectComposer(renderer);
    composer.setSize(appCongig.width, appCongig.height);
    composer.setPixelRatio(getPixelRatio());

    const renderPass = new RenderPass(scene, camera);
    composer.addPass(renderPass);

    const rgbShiftPass = new ShaderPass(RGBShiftShader);
    rgbShiftPass.uniforms['amount'].value = 0.0025;
    composer.addPass(rgbShiftPass);

    const gammaCorrectionPass = new ShaderPass(GammaCorrectionShader);
    composer.addPass(gammaCorrectionPass);

    return composer;
  }

  function createAmbientLight() {
    const ambientLight = new THREE.AmbientLight(THREE.Color.NAMES.white, 1);
    ambientLight.intensity = 0.5;
    scene.add(ambientLight);
  }

  function createGrid(z: number) {
    const geometry = new THREE.PlaneGeometry(
      appCongig.gridSize,
      appCongig.gridSize,
      24,
      24,
    );
    const material = new THREE.MeshStandardMaterial({
      map: gridTexture,
      displacementMap: terrainTexture,
      displacementScale: 50,
    });
    const grid = new THREE.Mesh(geometry, material);
    grid.rotation.x = -Math.PI * 0.5;
    grid.position.z = z;

    const spotLight = new THREE.SpotLight(
      'cornflowerblue',
      5,
      100,
      Math.PI * 0.5,
    );
    spotLight.position.set(0, 10, 50);
    spotLight.target.position.set(0, 0, 0);
    grid.add(spotLight);
    grid.add(spotLight.target);

    scene.add(grid);

    return grid;
  }

  function createGrids() {
    const grids: THREE.Mesh[] = [];
    for (let index = 0; index < 3; index++) {
      const grid = createGrid(appCongig.gridSize * index);
      grids.push(grid);
    }
    return grids;
  }

  function createSun() {
    const geometry = new THREE.CircleGeometry(100, 64, 0, Math.PI);
    const material = new THREE.MeshBasicMaterial({ color: colors.sun });
    const circle = new THREE.Mesh(geometry, material);
    circle.position.z = appCongig.gridSize * 2;
    circle.rotation.y = Math.PI;

    scene.add(circle);

    return circle;
  }

  function shiftGrids() {
    const first = grids[0];
    const isNearestGridOutOfView =
      camera.position.z > first.position.z + appCongig.gridSize / 2;
    if (isNearestGridOutOfView) {
      const last = grids[grids.length - 1];
      first.position.z = last.position.z + appCongig.gridSize;
      grids.push(grids.shift()!);
    }
  }

  function moveCamera(delta: number) {
    camera.position.z += appCongig.cameraSpeed * delta;
    sun.position.z = camera.position.z + sunZPosition;
  }

  function getPixelRatio() {
    return Math.min(window.devicePixelRatio, 2);
  }
</script>
