---
import Canvas from '../layouts/Canvas.astro';
---

<Canvas title="Vaporwave" />

<script>
  import * as THREE from 'three';

  const container = document.getElementById('container')!;

  const appCongig = {
    width: container.clientWidth,
    height: container.clientHeight,
    gridSize: 200,
    cameraSpeed: -50,
  };

  const textureLoader = new THREE.TextureLoader();
  const [gridTexture, terrainTexture, starfieldTexture] = await Promise.all([
    textureLoader.loadAsync('/textures/grid.png'),
    textureLoader.loadAsync('/textures/displacement-map.png'),
    textureLoader.loadAsync('/textures/starfield.png'),
  ]);
  const renderer = createRenderer();
  const scene = createScene();
  const camera = createCamera();
  const clock = new THREE.Clock();

  init();

  async function init() {
    createAmbientLight();
    const grids = [createGrid(0), createGrid(-appCongig.gridSize)];

    window.addEventListener('resize', () => {
      appCongig.width = container.clientWidth;
      appCongig.height = container.clientHeight;

      camera.aspect = appCongig.width / appCongig.height;
      camera.updateProjectionMatrix();
      renderer.setSize(appCongig.width, appCongig.height);
    });

    renderer.setAnimationLoop(() => {
      const delta = clock.getDelta();
      const first = grids[0];

      camera.position.z += appCongig.cameraSpeed * delta;

      const isNearestGridOutOfView =
        camera.position.z + appCongig.gridSize / 2 < first.position.z;
      if (isNearestGridOutOfView) {
        const last = grids[grids.length - 1];
        first.position.z = last.position.z - appCongig.gridSize;
        grids.push(grids.shift()!);
      }

      renderer.render(scene, camera);
    });
  }

  function createRenderer() {
    const renderer = new THREE.WebGLRenderer({
      antialias: true,
      canvas: container.querySelector('canvas')!,
    });
    renderer.setSize(appCongig.width, appCongig.height);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;

    return renderer;
  }

  function createScene() {
    const scene = new THREE.Scene();
    starfieldTexture;
    scene.background = starfieldTexture;
    return scene;
  }

  function createCamera() {
    const camera = new THREE.PerspectiveCamera(
      75,
      container.clientWidth / container.clientHeight,
      0.1,
      1000,
    );
    camera.position.y = 10;
    camera.position.z = 100;

    return camera;
  }

  function createAmbientLight() {
    const ambientLight = new THREE.AmbientLight(THREE.Color.NAMES.white, 1);
    ambientLight.intensity = 0.5;
    scene.add(ambientLight);
  }

  function createGrid(z: number) {
    const geometry = new THREE.PlaneGeometry(100, appCongig.gridSize, 24, 24);
    const material = new THREE.MeshStandardMaterial({
      map: gridTexture,
      displacementMap: terrainTexture,
      displacementScale: 40,
    });
    const grid = new THREE.Mesh(geometry, material);
    grid.rotation.x = -Math.PI * 0.5;
    grid.position.z = z;

    scene.add(grid);

    return grid;
  }
</script>
