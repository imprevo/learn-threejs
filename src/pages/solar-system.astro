---
import Canvas from '../layouts/Canvas.astro';
---

<Canvas title="Solar system" />

<script>
  import * as THREE from 'three';
  import { TrackballControls } from 'three/examples/jsm/controls/TrackballControls';

  const container = document.getElementById('container')!;

  const appCongig = {
    width: container.clientWidth,
    height: container.clientHeight,
    speed: 1, // 1 equal to 24 hours
  };

  interface PlanetConfig {
    name: string;
    diameter: number;
    distance: number;
    period: number;
    daylength: number;
    tilt: number;
    texture: string;
  }

  interface Updatable {
    tick(delta: number): void;
  }

  const PI_2 = Math.PI * 2;
  const HOURS_IN_DAY = 24;
  const PLANETS = {
    Sun: {
      name: 'Sun',
      diameter: 80,
      distance: 0,
      period: 0,
      daylength: 600,
      tilt: 0,
      texture: 'public/textures/planetpixelemporium/sunmap.jpg',
    },
    Mercury: {
      name: 'Mercury',
      diameter: 0.4 * 4,
      distance: 70,
      period: 88,
      daylength: 4222.6,
      tilt: 0.03,
      texture: 'public/textures/planetpixelemporium/mercurymap.jpg',
    },
    Venus: {
      name: 'Venus',
      diameter: 0.9 * 4,
      distance: 80,
      period: 224,
      daylength: 2802,
      tilt: 2.64,
      texture: 'public/textures/planetpixelemporium/venusmap.jpg',
    },
    Earth: {
      name: 'Earth',
      diameter: 1 * 4,
      distance: 90,
      period: 365,
      daylength: 24,
      tilt: 23.44,
      texture: '/textures/planetpixelemporium/earthmap1k.jpg',
    },
    Mars: {
      name: 'Mars',
      diameter: 0.5 * 4,
      distance: 100,
      period: 686,
      daylength: 24.7,
      tilt: 25.19,
      texture: 'public/textures/planetpixelemporium/mars_1k_color.jpg',
    },
    Jupiter: {
      name: 'Jupiter',
      diameter: 11.2,
      distance: 120,
      period: 4332,
      daylength: 9.9,
      tilt: 3.13,
      texture: 'public/textures/planetpixelemporium/jupitermap.jpg',
    },
    Saturn: {
      name: 'Saturn',
      diameter: 9.5,
      distance: 140,
      period: 10755,
      daylength: 10.7,
      tilt: 26.73,
      texture: 'public/textures/planetpixelemporium/saturnmap.jpg',
    },
    Uranus: {
      name: 'Uranus',
      diameter: 4,
      distance: 155,
      period: 30687,
      daylength: 17.2,
      tilt: 82.23,
      texture: 'public/textures/planetpixelemporium/uranusmap.jpg',
    },
    Neptune: {
      name: 'Neptune',
      diameter: 3.9,
      distance: 165,
      period: 60190,
      daylength: 16.1,
      tilt: 28.32,
      texture: 'public/textures/planetpixelemporium/neptunemap.jpg',
    },
  };

  class Planet extends THREE.Group implements Updatable {
    private rotationSpeed: number;

    constructor(config: PlanetConfig) {
      super();

      this.rotationSpeed = (PI_2 / config.daylength) * HOURS_IN_DAY;

      const terrainTexture = textureLoader.load(config.texture);
      const geometry = new THREE.SphereGeometry(config.diameter / 2);
      const material = new THREE.MeshStandardMaterial({ map: terrainTexture });
      const mesh = new THREE.Mesh(geometry, material);
      this.rotation.x = config.tilt;
      this.rotation.x = THREE.MathUtils.DEG2RAD * config.tilt;
      this.add(mesh);
    }

    public tick(delta: number) {
      const diff = delta * this.rotationSpeed * appCongig.speed;
      this.rotation.y += diff;
    }
  }

  class System extends THREE.Group implements Updatable {
    private point = Math.random();
    private orbitpath: THREE.EllipseCurve;
    private planet: Planet;
    private moveSpeed: number;

    constructor(config: PlanetConfig) {
      super();

      this.moveSpeed = 1 / config.period;

      this.orbitpath = createOrbitPath(config.distance);

      const orbit = createOrbit(this.orbitpath);
      orbit.rotateX(-Math.PI / 2);
      this.add(orbit);

      this.planet = new Planet(config);
      this.planet.position.x = config.distance;
      this.add(this.planet);
    }

    public tick(delta: number) {
      this.planet.tick(delta);
      this.calculateNextPosition(delta);
      this.updatePlanetPosition();
    }

    private calculateNextPosition(delta: number) {
      const diff = delta * this.moveSpeed * appCongig.speed;
      this.point = (this.point + diff) % 1;
    }

    private updatePlanetPosition() {
      const target = this.orbitpath.getPoint(this.point);
      this.planet.position.x = target.x;
      this.planet.position.z = target.y;
    }
  }

  class SolarSystem extends THREE.Group implements Updatable {
    private sun = createSun();
    private systems = [
      createMercurySystem(),
      createVenusSystem(),
      createEarthSystem(),
      createMarsSystem(),
      createJupiterSystem(),
      createSaturnSystem(),
      createUranusSystem(),
      createNeptuneSystem(),
    ];

    constructor() {
      super();
      this.add(this.sun, ...this.systems);
    }

    public tick(delta: number) {
      this.sun.tick(delta);
      this.systems.forEach((system) => system.tick(delta));
    }
  }

  const clock = new THREE.Clock();
  const textureLoader = new THREE.TextureLoader();

  const renderer = createRenderer();
  const scene = createScene();
  const camera = createCamera();
  const controls = createControls();

  scene.add(createAmbientLight());

  const solarSystem = new SolarSystem();

  scene.add(solarSystem);

  renderer.setAnimationLoop(() => {
    const delta = clock.getDelta();
    solarSystem.tick(delta);
    controls.update();
    renderer.render(scene, camera);
  });

  window.addEventListener('resize', () => {
    appCongig.width = container.clientWidth;
    appCongig.height = container.clientHeight;

    camera.aspect = appCongig.width / appCongig.height;
    camera.updateProjectionMatrix();
    renderer.setSize(appCongig.width, appCongig.height);
  });

  function createRenderer() {
    const renderer = new THREE.WebGLRenderer({
      antialias: true,
      canvas: container.querySelector('canvas')!,
    });
    renderer.setSize(appCongig.width, appCongig.height);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;

    return renderer;
  }

  function createScene() {
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0x111111);
    return scene;
  }

  function createCamera() {
    const camera = new THREE.PerspectiveCamera(
      75,
      container.clientWidth / container.clientHeight,
      0.1,
      1000,
    );
    camera.position.z = 150;
    camera.position.x = 150;
    camera.position.y = 150;
    return camera;
  }

  function createControls() {
    const controls = new TrackballControls(camera, renderer.domElement);
    controls.rotateSpeed = 5;
    controls.zoomSpeed = 1;
    controls.minDistance = 80;
    controls.maxDistance = 400;
    controls.panSpeed = 1;
    return controls;
  }

  function createAmbientLight() {
    const ambientLight = new THREE.AmbientLight(THREE.Color.NAMES.white, 1);
    return ambientLight;
  }

  function createOrbitPath(radius: number) {
    return new THREE.EllipseCurve(0, 0, radius, radius * 0.8, 0, PI_2);
  }

  function createOrbit(orbitpath: THREE.EllipseCurve) {
    const geometry = new THREE.BufferGeometry().setFromPoints(
      orbitpath.getSpacedPoints(100),
    );
    const material = new THREE.LineBasicMaterial({
      color: 0xffffff,
      transparent: true,
      opacity: 0.5,
    });
    const axis = new THREE.Line(geometry, material);
    return axis;
  }

  function createSun() {
    const planet = new Planet(PLANETS.Sun);
    return planet;
  }

  function createMercurySystem() {
    const system = new System(PLANETS.Mercury);
    return system;
  }

  function createVenusSystem() {
    const system = new System(PLANETS.Venus);
    return system;
  }

  function createEarthSystem() {
    const system = new System(PLANETS.Earth);
    return system;
  }

  function createMarsSystem() {
    const system = new System(PLANETS.Mars);
    return system;
  }

  function createJupiterSystem() {
    const system = new System(PLANETS.Jupiter);
    return system;
  }

  function createSaturnSystem() {
    const system = new System(PLANETS.Saturn);
    return system;
  }

  function createUranusSystem() {
    const system = new System(PLANETS.Uranus);
    return system;
  }

  function createNeptuneSystem() {
    const system = new System(PLANETS.Neptune);
    return system;
  }
</script>
