---
import Canvas from '../layouts/Canvas.astro';
---

<Canvas title="Matrix rain" />

<script>
  import * as THREE from 'three';
  import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';
  import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';
  import { FontLoader } from 'three/examples/jsm/loaders/FontLoader';

  const container = document.getElementById('container')!;

  const appCongig = {
    width: container.clientWidth,
    height: container.clientHeight,
    glyphSize: 2,
    rainSpeed: 50,
    glyphChangeThreshold: 0.02,
  };

  const clock = new THREE.Clock();
  const fontLoader = new FontLoader();

  const matrixFont = await fontLoader.loadAsync(
    '/fonts/Matrix-Code.facetype.json',
  );
  const glyphs = extractGlyphs();
  const renderer = createRenderer();
  const scene = createScene();
  const camera = createCamera();
  const effectComposer = createEffectComposer();

  class Glyph extends THREE.Group {
    private material = new THREE.LineBasicMaterial({
      transparent: true,
    });

    private mesh: THREE.Mesh;

    constructor() {
      super();

      this.mesh = new THREE.Mesh(this.createShape(), this.material);

      this.add(this.mesh);
    }

    public changeGlyph() {
      this.mesh.geometry.dispose();
      this.mesh.geometry = this.createShape();
    }

    public updateColor(index: number, total: number) {
      this.material.color = this.getTextColor(index, total);
      this.material.opacity = this.getTextOpacity(index, total);
    }

    private getRandomGlyph() {
      const index = THREE.MathUtils.randInt(0, glyphs.length - 1);
      return glyphs[index];
    }

    private createShape() {
      const text = this.getRandomGlyph();
      const shapes = matrixFont.generateShapes(text, 1);
      return new THREE.ShapeGeometry(shapes);
    }

    private getTextColor(index: number, total: number) {
      if (index === total - 1) {
        return new THREE.Color(0xffffff);
      }
      return new THREE.Color(0x00ff00);
    }

    private getTextOpacity(index: number, total: number) {
      return Math.min(1, index / total);
    }
  }

  class GlyphLine extends THREE.Group {
    private offset = 40;
    private glyphs: Glyph[] = [];

    constructor(size: number) {
      super();

      for (let index = 0; index < size; index++) {
        this.glyphs.push(this.createGlyph(index, size));
      }

      this.add(...this.glyphs);
    }

    public move() {
      const first = this.glyphs[0];
      const last = this.glyphs[this.glyphs.length - 1];
      first.position.y =
        first.position.y < -this.offset
          ? this.offset + THREE.MathUtils.randInt(0, 20)
          : last.position.y - appCongig.glyphSize;

      this.glyphs.push(this.glyphs.shift()!);

      this.glyphs.forEach((glyph, index) => {
        if (this.shouldChangeGlyph()) {
          glyph.changeGlyph();
        }
        glyph.updateColor(index, this.glyphs.length);
      });
    }

    private createGlyph(index: number, size: number) {
      const glyph = new Glyph();
      glyph.updateColor(index, size);
      glyph.position.y = this.offset + appCongig.glyphSize * (size - index);
      return glyph;
    }

    private shouldChangeGlyph() {
      return Math.random() < appCongig.glyphChangeThreshold;
    }
  }

  createRain();

  window.addEventListener('resize', () => {
    appCongig.width = container.clientWidth;
    appCongig.height = container.clientHeight;

    camera.aspect = appCongig.width / appCongig.height;
    camera.updateProjectionMatrix();
    renderer.setSize(appCongig.width, appCongig.height);

    effectComposer.setSize(appCongig.width, appCongig.height);
    effectComposer.setPixelRatio(getPixelRatio());
  });

  renderer.setAnimationLoop(() => {
    const delta = clock.getDelta();

    effectComposer.render();
  });

  function createRenderer() {
    const renderer = new THREE.WebGLRenderer({
      antialias: true,
      canvas: container.querySelector('canvas')!,
    });
    renderer.setSize(appCongig.width, appCongig.height);
    renderer.setPixelRatio(getPixelRatio());
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;

    return renderer;
  }

  function createScene() {
    const scene = new THREE.Scene();
    return scene;
  }

  function createCamera() {
    const camera = new THREE.PerspectiveCamera(
      75,
      container.clientWidth / container.clientHeight,
      0.1,
      1000,
    );
    camera.position.z = 30;
    return camera;
  }

  function createEffectComposer() {
    const composer = new EffectComposer(renderer);
    composer.setSize(appCongig.width, appCongig.height);
    composer.setPixelRatio(getPixelRatio());

    const renderPass = new RenderPass(scene, camera);
    composer.addPass(renderPass);

    return composer;
  }

  function createRain() {
    const GLIPH_SIZE_IN_PIXELS = 36;
    const count = Math.round(appCongig.width / GLIPH_SIZE_IN_PIXELS);
    const lines: GlyphLine[] = [];

    for (let index = 0; index < count; index++) {
      const line = new GlyphLine(THREE.MathUtils.randInt(20, 30));
      line.position.x = (index - count / 2) * appCongig.glyphSize;
      scene.add(line);
      lines.push(line);
    }

    setInterval(() => {
      lines.forEach((line) => line.move());
    }, appCongig.rainSpeed);
  }

  function extractGlyphs() {
    const data = matrixFont.data as unknown as Record<string, string>;
    const glyphs = Object.keys(data.glyphs);
    glyphs.splice(9, 4); // remove broken/empty symbols
    return glyphs;
  }

  function getPixelRatio() {
    return Math.min(window.devicePixelRatio, 2);
  }
</script>
