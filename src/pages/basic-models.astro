---
import Canvas from '../layouts/Canvas.astro';
---

<Canvas title="Basic Models" />

<script>
  import * as THREE from 'three';
  import * as TWEEN from '@tweenjs/tween.js';
  import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
  import { GUI } from 'three/examples/jsm/libs/lil-gui.module.min';
  import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';

  interface Updatable {
    tick: (delta: number) => void;
  }

  const container = document.getElementById('container')!;

  const appCongig = {
    width: container.clientWidth,
    height: container.clientHeight,
  };

  const gui = new GUI();
  const renderer = createRenderer();
  const scene = createScene();
  const camera = createCamera();
  const controls = new OrbitControls(camera, renderer.domElement);
  const clock = new THREE.Clock();

  init();

  async function init() {
    createPlane();

    const updatables: Updatable[] = [
      createAmbientLight(),
      await createCarModel(),
    ];

    await Promise.all([
      loadGatesModel(),
      loadChikenModel(),
      loadDoggyModel(),
      loadSekiroModel(),
    ]);

    animate();

    window.addEventListener('resize', () => {
      appCongig.width = container.clientWidth;
      appCongig.height = container.clientHeight;

      camera.aspect = appCongig.width / appCongig.height;
      camera.updateProjectionMatrix();
      renderer.setSize(appCongig.width, appCongig.height);
    });

    function animate() {
      requestAnimationFrame(animate);

      const delta = clock.getDelta();
      updatables.forEach((obj) => obj.tick(delta));

      controls.update();
      renderer.render(scene, camera);
    }
  }

  function createRenderer() {
    const renderer = new THREE.WebGLRenderer({
      antialias: true,
      canvas: container.querySelector('canvas')!,
    });
    renderer.setSize(appCongig.width, appCongig.height);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;

    return renderer;
  }

  function createScene() {
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0x61d0ff);

    const sceneFolder = gui.addFolder('Scene');
    sceneFolder.addColor(scene, 'background');

    return scene;
  }

  function createCamera() {
    const camera = new THREE.PerspectiveCamera(
      75,
      container.clientWidth / container.clientHeight,
      0.1,
      1000,
    );
    camera.position.y = 20;
    camera.position.z = 35;
    camera.position.x = 35;

    return camera;
  }

  function createAmbientLight(): Updatable {
    const ambientLight = new THREE.AmbientLight(THREE.Color.NAMES.white, 1);
    ambientLight.intensity = 0.5;
    scene.add(ambientLight);

    const ambientLightFolder = gui.addFolder('Ambient Light');
    ambientLightFolder.addColor(ambientLight, 'color');
    ambientLightFolder.add(ambientLight, 'intensity', 0, 1, 0.01);

    const tween = new TWEEN.Tween(ambientLight.color, false)
      .to({ g: 0, b: 0 }, 5000)
      .easing(TWEEN.Easing.Quadratic.InOut)
      .repeat(Infinity)
      .yoyo(true)
      .start();

    return {
      tick: () => {
        tween.update();
      },
    };
  }

  function createPlane() {
    const geometry = new THREE.PlaneGeometry(100, 100);
    const material = new THREE.MeshPhongMaterial({
      color: 0x93ff8f,
    });
    const plane = new THREE.Mesh(geometry, material);
    plane.rotateX(-Math.PI / 2);
    plane.receiveShadow = true;
    scene.add(plane);

    const planeFolder = gui.addFolder('Plane');
    planeFolder.addColor(material, 'color');

    return plane;
  }

  async function createCarModel(): Promise<Updatable> {
    const loader = new GLTFLoader();
    const data = await loader.loadAsync(
      '/models/low-poly_truck_car_drifter/scene.gltf',
    );
    const mixer = new THREE.AnimationMixer(data.scene);
    mixer.clipAction(data.animations[0]).play();
    data.scene.scale.setScalar(0.05);
    data.scene.position.x = 2;
    data.scene.position.y = 1.9;
    data.scene.rotateY(1.5 * Math.PI);
    scene.add(data.scene);

    return {
      tick: (delta) => mixer.update(delta),
    };
  }

  async function loadGatesModel() {
    const loader = new GLTFLoader();
    const data = await loader.loadAsync(
      '/models/japanese_gates_torii_low_poly/scene.gltf',
    );
    data.scene.scale.setScalar(4);
    scene.add(data.scene);
  }

  async function loadChikenModel() {
    const loader = new GLTFLoader();
    const data = await loader.loadAsync('/models/low_poly_chicken/scene.gltf');
    data.scene.position.x = 18;
    data.scene.position.z = 5;
    data.scene.position.y = 5;
    scene.add(data.scene);
  }

  async function loadDoggyModel() {
    const loader = new GLTFLoader();
    const data = await loader.loadAsync('/models/low_poly_doggy/scene.gltf');
    data.scene.scale.setScalar(0.5);
    data.scene.position.x = 18;
    data.scene.position.z = 5;
    data.scene.position.y = -0.01;
    data.scene.rotateY(-0.25 * Math.PI);
    scene.add(data.scene);
  }

  async function loadSekiroModel() {
    const loader = new GLTFLoader();
    const data = await loader.loadAsync('/models/low-poly_sekiro/scene.gltf');
    data.scene.scale.setScalar(0.05);
    data.scene.position.x = 22;
    data.scene.position.z = -5;
    data.scene.rotateY(-0.25 * Math.PI);
    scene.add(data.scene);
  }
</script>
