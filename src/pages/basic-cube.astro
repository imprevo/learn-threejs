---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Basic Cube">
  <main>
    <h1>Basic Cube</h1>
    <div id="container">
      <canvas></canvas>
    </div>
  </main>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1.5rem;
    height: 100vh;
    display: flex;
    flex-direction: column;
  }

  h1 {
    font-size: 3rem;
    font-weight: 800;
    margin: 0;
  }

  #container {
    flex: 1;
    position: relative;
  }

  canvas {
    position: absolute;
    top: 0;
    left: 0;
  }
</style>

<script>
  import * as THREE from 'three';

  const container = document.getElementById('container')!;

  const renderer = new THREE.WebGLRenderer({
    antialias: true,
    canvas: container.querySelector('canvas')!,
  });
  renderer.setSize(container.clientWidth, container.clientHeight);
  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(
    75,
    container.clientWidth / container.clientHeight,
    0.1,
    1000,
  );
  camera.position.z = 5;

  const geometry = new THREE.BoxGeometry(2, 2, 2);
  const material = new THREE.MeshBasicMaterial({
    color: 0x00ff00,
    wireframe: true,
  });
  const cube = new THREE.Mesh(geometry, material);
  scene.add(cube);

  function animate() {
    requestAnimationFrame(animate);

    cube.rotation.x += 0.005;
    cube.rotation.y += 0.005;

    renderer.render(scene, camera);
  }
  animate();

  window.addEventListener('resize', () => {
    const width = container.clientWidth;
    const height = container.clientHeight;

    camera.aspect = width / height;
    camera.updateProjectionMatrix();
    renderer.setSize(width, height);
  });
</script>
