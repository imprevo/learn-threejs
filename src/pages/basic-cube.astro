---
import Canvas from '../layouts/Canvas.astro';
---

<Canvas title="Basic Cube" />

<script>
  import * as THREE from 'three';
  import { TrackballControls } from 'three/examples/jsm/controls/TrackballControls';
  import { GUI } from 'three/examples/jsm/libs/lil-gui.module.min';

  const appCongig = {
    autoRotation: true,
    rotationSpeed: 0.001,
  };

  const container = document.getElementById('container')!;

  const renderer = new THREE.WebGLRenderer({
    antialias: true,
    canvas: container.querySelector('canvas')!,
  });
  renderer.setSize(container.clientWidth, container.clientHeight);
  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(
    75,
    container.clientWidth / container.clientHeight,
    0.1,
    1000,
  );
  camera.position.z = 5;

  const geometry = new THREE.BoxGeometry(2, 2, 2);
  const material = new THREE.MeshBasicMaterial({
    color: 0x00ff00,
    wireframe: true,
  });
  const cube = new THREE.Mesh(geometry, material);
  scene.add(cube);

  const controls = new TrackballControls(camera, renderer.domElement);
  controls.rotateSpeed = 1;
  controls.zoomSpeed = 1;
  controls.panSpeed = 1;

  const gui = new GUI();

  gui.add(appCongig, 'autoRotation').name('Auto rotation');
  gui.add(appCongig, 'rotationSpeed', 0, 0.05, 0.001);

  const materialFolder = gui.addFolder('Material');
  materialFolder.add(material, 'wireframe');
  materialFolder.addColor({ color: material.color }, 'color');

  const positionFolder = gui.addFolder('Position');
  positionFolder.add(cube.position, 'x', -5, 5, 0.1);
  positionFolder.add(cube.position, 'y', -5, 5, 0.1);
  positionFolder.add(cube.position, 'z', -5, 5, 0.1);

  const scaleFolder = gui.addFolder('Scale');
  scaleFolder.add(cube.scale, 'x', 0, 5, 0.1).name('width');
  scaleFolder.add(cube.scale, 'y', 0, 5, 0.1).name('height');
  scaleFolder.add(cube.scale, 'z', 0, 5, 0.1).name('depth');

  function animate() {
    requestAnimationFrame(animate);

    if (appCongig.autoRotation) {
      cube.rotation.x += appCongig.rotationSpeed;
      cube.rotation.y += appCongig.rotationSpeed;
    }

    controls.update();

    renderer.render(scene, camera);
  }
  animate();

  window.addEventListener('resize', () => {
    const width = container.clientWidth;
    const height = container.clientHeight;

    camera.aspect = width / height;
    camera.updateProjectionMatrix();
    renderer.setSize(width, height);
  });
</script>
